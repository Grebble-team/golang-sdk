// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalAppClient is the client API for ExternalApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalAppClient interface {
	AppInfo(ctx context.Context, in *AppExternalInfoRequest, opts ...grpc.CallOption) (*AppInfoExternalResponse, error)
}

type externalAppClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalAppClient(cc grpc.ClientConnInterface) ExternalAppClient {
	return &externalAppClient{cc}
}

func (c *externalAppClient) AppInfo(ctx context.Context, in *AppExternalInfoRequest, opts ...grpc.CallOption) (*AppInfoExternalResponse, error) {
	out := new(AppInfoExternalResponse)
	err := c.cc.Invoke(ctx, "/grebbleFlow.v1.ExternalApp/AppInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalAppServer is the server API for ExternalApp service.
// All implementations must embed UnimplementedExternalAppServer
// for forward compatibility
type ExternalAppServer interface {
	AppInfo(context.Context, *AppExternalInfoRequest) (*AppInfoExternalResponse, error)
	mustEmbedUnimplementedExternalAppServer()
}

// UnimplementedExternalAppServer must be embedded to have forward compatible implementations.
type UnimplementedExternalAppServer struct {
}

func (UnimplementedExternalAppServer) AppInfo(context.Context, *AppExternalInfoRequest) (*AppInfoExternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppInfo not implemented")
}
func (UnimplementedExternalAppServer) mustEmbedUnimplementedExternalAppServer() {}

// UnsafeExternalAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalAppServer will
// result in compilation errors.
type UnsafeExternalAppServer interface {
	mustEmbedUnimplementedExternalAppServer()
}

func RegisterExternalAppServer(s grpc.ServiceRegistrar, srv ExternalAppServer) {
	s.RegisterService(&ExternalApp_ServiceDesc, srv)
}

func _ExternalApp_AppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppExternalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAppServer).AppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grebbleFlow.v1.ExternalApp/AppInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAppServer).AppInfo(ctx, req.(*AppExternalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalApp_ServiceDesc is the grpc.ServiceDesc for ExternalApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grebbleFlow.v1.ExternalApp",
	HandlerType: (*ExternalAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppInfo",
			Handler:    _ExternalApp_AppInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inner/v1/app.proto",
}
