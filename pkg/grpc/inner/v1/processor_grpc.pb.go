// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessorClient is the client API for Processor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessorClient interface {
	Execute(ctx context.Context, in *FlowExecuteRequest, opts ...grpc.CallOption) (Processor_ExecuteClient, error)
}

type processorClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessorClient(cc grpc.ClientConnInterface) ProcessorClient {
	return &processorClient{cc}
}

func (c *processorClient) Execute(ctx context.Context, in *FlowExecuteRequest, opts ...grpc.CallOption) (Processor_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Processor_ServiceDesc.Streams[0], "/grebbleFlow.v1.Processor/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &processorExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Processor_ExecuteClient interface {
	Recv() (*FlowExecuteResponse, error)
	grpc.ClientStream
}

type processorExecuteClient struct {
	grpc.ClientStream
}

func (x *processorExecuteClient) Recv() (*FlowExecuteResponse, error) {
	m := new(FlowExecuteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessorServer is the server API for Processor service.
// All implementations must embed UnimplementedProcessorServer
// for forward compatibility
type ProcessorServer interface {
	Execute(*FlowExecuteRequest, Processor_ExecuteServer) error
	mustEmbedUnimplementedProcessorServer()
}

// UnimplementedProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedProcessorServer struct {
}

func (UnimplementedProcessorServer) Execute(*FlowExecuteRequest, Processor_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedProcessorServer) mustEmbedUnimplementedProcessorServer() {}

// UnsafeProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessorServer will
// result in compilation errors.
type UnsafeProcessorServer interface {
	mustEmbedUnimplementedProcessorServer()
}

func RegisterProcessorServer(s grpc.ServiceRegistrar, srv ProcessorServer) {
	s.RegisterService(&Processor_ServiceDesc, srv)
}

func _Processor_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlowExecuteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessorServer).Execute(m, &processorExecuteServer{stream})
}

type Processor_ExecuteServer interface {
	Send(*FlowExecuteResponse) error
	grpc.ServerStream
}

type processorExecuteServer struct {
	grpc.ServerStream
}

func (x *processorExecuteServer) Send(m *FlowExecuteResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Processor_ServiceDesc is the grpc.ServiceDesc for Processor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Processor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grebbleFlow.v1.Processor",
	HandlerType: (*ProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _Processor_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "inner/v1/processor.proto",
}
